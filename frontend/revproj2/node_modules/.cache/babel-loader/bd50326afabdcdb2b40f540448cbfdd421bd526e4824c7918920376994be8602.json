{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\htham\\\\Documents\\\\Revature\\\\InfoSysTraining\\\\project_2_trackr\\\\frontend\\\\revproj2\\\\src\\\\Components\\\\PostFeed\\\\PostList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { fetchEventSource } from '@microsoft/fetch-event-source';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PostList() {\n  _s();\n  const Token = localStorage.getItem('token');\n  const cleanToken = Token === null || Token === void 0 ? void 0 : Token.replace(/\"/g, \"\");\n  const [posts, setPosts] = useState([]);\n  const postIds = [];\n\n  // Start polling function with delay\n  /*const startPolling = async () => {\r\n      while (true) {\r\n          try {\r\n              const newPost = await getPosts();\r\n              if(!newPost)\r\n              {\r\n                throw Error;\r\n              }\r\n       else\r\n       {\r\n        if(goalIds.includes(newPost.goal_id) === false)\r\n  \t {\r\n              \t\tconsole.log(\"New Post: \" + newPost)\r\n  \tgoalIds.push(newPost.goal_id);\r\n  \tlet photo_ =  await getPostPhoto(newPost.photo);\r\n  \tnewPost.photo_obj = photo_;\r\n              \t\tsetPosts((prevPosts) => [newPost, ...prevPosts]); // Appends at the start of the list\r\n       \t\t}\r\n  }\r\n       }\r\n          catch (error) {\r\n              console.error(\"Error during polling:\", error);\r\n          }\r\n            // Delay between polling requests (e.g., 5 seconds)\r\n          await new Promise((resolve) => setTimeout(resolve, 10000)); // Adjust polling interval as needed\r\n      }\r\n  };*/\n\n  useEffect(() => {\n    fetchEventSource('http://localhost:8080/sse/posts', {\n      headers: {\n        'Content-Type': 'text/event-stream',\n        'Authorization': \"Bearer \" + cleanToken,\n        'credentials': 'include'\n      },\n      onmessage(ev) {\n        console.log(\"Post Received: \" + ev.data);\n        try {\n          const newPost = JSON.parse(ev.data);\n          console.log(Object.keys(newPost));\n          console.log(newPost.goal);\n          if (!newPost) {\n            throw Error;\n          } else {\n            if (postIds.includes(newPost.postId) === false) {\n              console.log(\"New post: \" + newPost);\n              postIds.push(newPost.postId);\n              /*const getPhoto = async () => {\r\n              console.log(\"Photo request sent\")\r\n              newPost.photo = await getPostPhoto(photo_name);\r\n              }\r\n              getPhoto():\r\n              */\n              //console.log(newPost.photo);\n              setPosts(prev => [newPost, ...prev]);\n            }\n          }\n        } catch (error) {\n          console.error(\"Error during polling: \", error);\n        }\n      }\n    });\n  }, []); // Empty dependency array ensures it runs only once\n\n  function photoURl(photo_name) {\n    let url = `https://trackr-photo-store.s3.us-east-2.amazonaws.com/${photo_name}`;\n    console.log(url);\n    return url;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Consumed Messages: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"Goal ID: \", post.goal.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"User ID: \", post.user.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Messge Text: \", post.message_text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          loading: \"lazy\",\n          src: photoURl(post.photo),\n          width: \"200\",\n          height: \"auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 23\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 7\n  }, this);\n}\n_s(PostList, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useEffect","useState","fetchEventSource","jsxDEV","_jsxDEV","PostList","_s","Token","localStorage","getItem","cleanToken","replace","posts","setPosts","postIds","headers","onmessage","ev","console","log","data","newPost","JSON","parse","Object","keys","goal","Error","includes","postId","push","prev","error","photoURl","photo_name","url","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","index","id","user","message_text","loading","src","photo","width","height","_c","$RefreshReg$"],"sources":["C:/Users/htham/Documents/Revature/InfoSysTraining/project_2_trackr/frontend/revproj2/src/Components/PostFeed/PostList.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { getPostPhoto } from '../../API/Axios';\r\nimport { fetchEventSource } from '@microsoft/fetch-event-source';\r\n\r\n\r\nfunction PostList() {\r\n  const Token = localStorage.getItem('token');\r\n  const cleanToken = Token?.replace(/\"/g, \"\");\r\n  const [posts, setPosts] = useState<any[]>([]);\r\n  const postIds : number[] = [];\r\n\r\n  // Start polling function with delay\r\n  /*const startPolling = async () => {\r\n      while (true) {\r\n          try {\r\n              const newPost = await getPosts();\r\n              if(!newPost)\r\n              {\r\n                throw Error;\r\n              }\r\n\t      else\r\n\t      {\r\n\t\t      if(goalIds.includes(newPost.goal_id) === false)\r\n\t\t\t {\r\n              \t\tconsole.log(\"New Post: \" + newPost)\r\n\t\t\tgoalIds.push(newPost.goal_id);\r\n\t\t\tlet photo_ =  await getPostPhoto(newPost.photo);\r\n\t\t\tnewPost.photo_obj = photo_;\r\n              \t\tsetPosts((prevPosts) => [newPost, ...prevPosts]); // Appends at the start of the list\r\n\t      \t\t}\r\n\t\t}\r\n\t      }\r\n          catch (error) {\r\n              console.error(\"Error during polling:\", error);\r\n          }\r\n\r\n          // Delay between polling requests (e.g., 5 seconds)\r\n          await new Promise((resolve) => setTimeout(resolve, 10000)); // Adjust polling interval as needed\r\n      }\r\n  };*/\r\n\r\n  useEffect(() => {\r\n      fetchEventSource('http://localhost:8080/sse/posts', {\r\n\t      headers: {\r\n\t\t      'Content-Type': 'text/event-stream',\r\n\t\t      'Authorization': \"Bearer \" + cleanToken,\r\n\t\t      'credentials':'include'\r\n\t      \t\t},\r\n\t      \r\n\t      onmessage(ev : any) {\r\n\t\t      console.log(\"Post Received: \" + ev.data);\r\n\t\t      try\r\n\t\t      {\r\n\t\t\t      const newPost = JSON.parse(ev.data);\r\n\t\t\t      console.log(Object.keys(newPost));\r\n\t\t\t      console.log(newPost.goal);\r\n\r\n\t\t\t      if(!newPost)\r\n\t\t\t\t{\r\n\t\t\t\t\tthrow Error;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(postIds.includes(newPost.postId) === false)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconsole.log(\"New post: \" + newPost);\r\n\t\t\t\t\t\t\tpostIds.push(newPost.postId);\r\n\t\t\t\t\t\t        /*const getPhoto = async () => {\r\n\t\t\t\t\t\t\tconsole.log(\"Photo request sent\")\r\n\t\t\t\t\t\t\tnewPost.photo = await getPostPhoto(photo_name);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tgetPhoto():\r\n\t\t\t\t\t\t\t*/\r\n\t\t\t\t\t\t\t//console.log(newPost.photo);\r\n\t\t\t\t\t\t\tsetPosts((prev) => [newPost,...prev]);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t      }\r\n\t\t      catch(error: any)\r\n\t\t      {\r\n\t\t\t      console.error(\"Error during polling: \", error);\r\n\t\t      }\r\n\t}\r\n      } );\r\n  }, []); // Empty dependency array ensures it runs only once\r\n\r\n\r\n  function photoURl(photo_name : string): string {\r\n    let url = `https://trackr-photo-store.s3.us-east-2.amazonaws.com/${photo_name}`;\r\n    console.log(url);\r\n    return url;\r\n}\r\n\r\n    return (\r\n      <div>\r\n          <h3>Consumed Messages: </h3>\r\n            <div>\r\n            {posts.map((post,index) => (\r\n                      <div key = {index}>\r\n                        <h5>Goal ID: {post.goal.id}</h5>\r\n                        <p>User ID: {post.user.id}</p>\r\n                        <p>Messge Text: {post.message_text}</p>\r\n                        <img loading=\"lazy\" src = {photoURl(post.photo)} width=\"200\" height=\"auto\"></img>\r\n                        </div>\r\n                  ))}\r\n            </div>\r\n      </div>\r\n      )\r\n    }\r\n  \r\n  export default PostList\r\n\r\n  \r\n  \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}