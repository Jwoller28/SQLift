{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN':\n      // Get API call of user being logged in\n      return {\n        user: action.payload\n      };\n    case 'LOGOUT':\n      return {\n        user: null\n      };\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n};\n\n// context type\n\nexport const AuthContext = /*#__PURE__*/createContext(null);\nconst initialAuthState = {\n  user: null\n};\n\n// Provider component\n\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const login = () => {};\n};\n\n// export const AuthProvider: React.FC<AuthProviderProps> = ({children}) => {\n//     const [state, dispatch] = useReducer(authReducer, initialAuthState);\n\n//     return(\n//         <AuthContext.Provider value={{state, dispatch}}>\n//             {children}\n//         </AuthContext.Provider>\n//     )\n// }\n_s(AuthProvider, \"BT2f1XiqCgFHwobQTWR7kond0Ig=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","authReducer","state","action","type","user","payload","Error","AuthContext","initialAuthState","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","login","_c","$RefreshReg$"],"sources":["C:/Users/brets/Documents/Revature-Projects/RevP2/revProj2/frontend/revproj2/src/Components/UserContext/UserContext.tsx"],"sourcesContent":["import { createContext, ReactNode, useReducer, useState } from \"react\";\r\n\r\ninterface User{\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\ninterface AuthState{\r\n    user: User | null;\r\n    // login: (username: string, password: string) => void;\r\n    // logout: () => void;\r\n}\r\n\r\ntype AuthAction = {type: 'LOGIN'; payload: User} | {type: 'LOGOUT'};\r\n\r\nconst authReducer = (state: AuthState, action: AuthAction): AuthState =>{\r\n    switch(action.type){\r\n        case 'LOGIN':   // Get API call of user being logged in\r\n            return {user: action.payload};\r\n        case 'LOGOUT':\r\n            return {user: null};\r\n        default:\r\n            throw new Error(`Unhandled action type: ${(action as AuthAction).type}`);\r\n    }\r\n}\r\n\r\n\r\n// context type\r\ninterface AuthContextType{\r\n    // state: AuthState;\r\n    // dispatch: React.Dispatch<AuthAction>;\r\n    isAuthenticated: boolean;\r\n    login: () => void;\r\n    logout: () => void;\r\n    \r\n}\r\n\r\nexport const AuthContext = createContext<AuthContextType | null> (null);\r\n\r\nconst initialAuthState: AuthState = {user: null};\r\n\r\n// Provider component\r\n\r\ninterface AuthProviderProps{\r\n    children: ReactNode;\r\n}\r\n\r\n\r\nexport const AuthProvider = ({children}): {children: ReactNode} => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n    const login = () => {\r\n        \r\n    }\r\n}\r\n\r\n// export const AuthProvider: React.FC<AuthProviderProps> = ({children}) => {\r\n//     const [state, dispatch] = useReducer(authReducer, initialAuthState);\r\n\r\n//     return(\r\n//         <AuthContext.Provider value={{state, dispatch}}>\r\n//             {children}\r\n//         </AuthContext.Provider>\r\n//     )\r\n// }"],"mappings":";AAAA,SAASA,aAAa,EAAyBC,QAAQ,QAAQ,OAAO;AAetE,MAAMC,WAAW,GAAGA,CAACC,KAAgB,EAAEC,MAAkB,KAAe;EACpE,QAAOA,MAAM,CAACC,IAAI;IACd,KAAK,OAAO;MAAI;MACZ,OAAO;QAACC,IAAI,EAAEF,MAAM,CAACG;MAAO,CAAC;IACjC,KAAK,QAAQ;MACT,OAAO;QAACD,IAAI,EAAE;MAAI,CAAC;IACvB;MACI,MAAM,IAAIE,KAAK,CAAC,0BAA2BJ,MAAM,CAAgBC,IAAI,EAAE,CAAC;EAChF;AACJ,CAAC;;AAGD;;AAUA,OAAO,MAAMI,WAAW,gBAAGT,aAAa,CAA0B,IAAI,CAAC;AAEvE,MAAMU,gBAA2B,GAAG;EAACJ,IAAI,EAAE;AAAI,CAAC;;AAEhD;;AAOA,OAAO,MAAMK,YAAY,GAAGA,CAAC;EAACC;AAAQ,CAAC,KAA4B;EAAAC,EAAA;EAC/D,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAE7D,MAAMe,KAAK,GAAGA,CAAA,KAAM,CAEpB,CAAC;AACL,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAAH,EAAA,CAhBaF,YAAY;AAAAM,EAAA,GAAZN,YAAY;AAAA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}