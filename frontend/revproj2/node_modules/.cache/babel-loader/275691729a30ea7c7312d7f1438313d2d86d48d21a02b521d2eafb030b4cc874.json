{"ast":null,"code":"import { createContext } from \"react\";\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'LOGIN':\n      // Get API call of user being logged in\n      return {\n        user: action.payload\n      };\n    case 'LOGOUT':\n      return {\n        user: null\n      };\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n};\n\n// context type\n\nexport const AuthContext = /*#__PURE__*/createContext(null);\nconst initialAuthState = {\n  user: null\n};\n\n// Provider component\n\n// export const AuthProvider = ({children}): {children: ReactNode} => { Can probs delete\n//     const [isAuthenticated, setIsAuthenticated]\n// }\n\n// export const AuthProvider: React.FC<AuthProviderProps> = ({children}) => {\n//     const [state, dispatch] = useReducer(authReducer, initialAuthState);\n\n//     return(\n//         <AuthContext.Provider value={{state, dispatch}}>\n//             {children}\n//         </AuthContext.Provider>\n//     )\n// }","map":{"version":3,"names":["createContext","authReducer","state","action","type","user","payload","Error","AuthContext","initialAuthState"],"sources":["C:/Users/brets/Documents/Revature-Projects/RevP2/revProj2/frontend/revproj2/src/Components/UserContext/UserContext.tsx"],"sourcesContent":["import { createContext, ReactNode, useReducer } from \"react\";\r\n\r\ninterface User{\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\ninterface AuthState{\r\n    user: User | null;\r\n}\r\n\r\ntype AuthAction = {type: 'LOGIN'; payload: User} | {type: 'LOGOUT'};\r\n\r\nconst authReducer = (state: AuthState, action: AuthAction): AuthState =>{\r\n    switch(action.type){\r\n        case 'LOGIN':   // Get API call of user being logged in\r\n            return {user: action.payload};\r\n        case 'LOGOUT':\r\n            return {user: null};\r\n        default:\r\n            throw new Error(`Unhandled action type: ${(action as AuthAction).type}`);\r\n    }\r\n}\r\n\r\n\r\n// context type\r\ninterface AuthContextType{\r\n    state: AuthState;\r\n    dispatch: React.Dispatch<AuthAction>;\r\n    isAuthenticated: boolean;\r\n}\r\n\r\nexport const AuthContext = createContext<AuthContextType | null> (null);\r\n\r\nconst initialAuthState: AuthState = {user: null};\r\n\r\n// Provider component\r\n\r\ninterface AuthProviderProps{\r\n    children: ReactNode;\r\n}\r\n\r\n\r\n// export const AuthProvider = ({children}): {children: ReactNode} => { Can probs delete\r\n//     const [isAuthenticated, setIsAuthenticated]\r\n// }\r\n\r\n// export const AuthProvider: React.FC<AuthProviderProps> = ({children}) => {\r\n//     const [state, dispatch] = useReducer(authReducer, initialAuthState);\r\n\r\n//     return(\r\n//         <AuthContext.Provider value={{state, dispatch}}>\r\n//             {children}\r\n//         </AuthContext.Provider>\r\n//     )\r\n// }"],"mappings":"AAAA,SAASA,aAAa,QAA+B,OAAO;AAa5D,MAAMC,WAAW,GAAGA,CAACC,KAAgB,EAAEC,MAAkB,KAAe;EACpE,QAAOA,MAAM,CAACC,IAAI;IACd,KAAK,OAAO;MAAI;MACZ,OAAO;QAACC,IAAI,EAAEF,MAAM,CAACG;MAAO,CAAC;IACjC,KAAK,QAAQ;MACT,OAAO;QAACD,IAAI,EAAE;MAAI,CAAC;IACvB;MACI,MAAM,IAAIE,KAAK,CAAC,0BAA2BJ,MAAM,CAAgBC,IAAI,EAAE,CAAC;EAChF;AACJ,CAAC;;AAGD;;AAOA,OAAO,MAAMI,WAAW,gBAAGR,aAAa,CAA0B,IAAI,CAAC;AAEvE,MAAMS,gBAA2B,GAAG;EAACJ,IAAI,EAAE;AAAI,CAAC;;AAEhD;;AAOA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}