{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\htham\\\\Documents\\\\Revature\\\\InfoSysTraining\\\\project_2_trackr\\\\revProj2\\\\frontend\\\\revproj2\\\\src\\\\Components\\\\UserLogin\\\\UserManagement.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport UserLogin from './UserLogin';\nimport { AuthContext } from '../UserContext/UserContext';\nimport { useNavigate } from 'react-router-dom';\n\n// Contains the logic for the UserLogin page and what to do with the input/submit button interaction\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction UserManagement() {\n  _s();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [token, setToken] = useState(\"\");\n  const navigate = useNavigate();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"Login must be used within an AuthProvider\");\n  }\n  const {\n    dispatch\n  } = context;\n  useEffect(() => {\n    console.log(\"Here is token after state change: \", token);\n    localStorage.setItem('token', JSON.stringify(token));\n  }, [token]);\n\n  // Function to handle submit event on login page\n  function handleSubmit(event) {\n    event.preventDefault();\n    const fetchData = async () => {\n      const response = await fetch('http://localhost:8080/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Here is the HTTP error status: ${response.status}`);\n      }\n      const data = await response.text(); // This line is used to get the token sent back from spring boot and update our token state.\n      // const jsonData = JSON.stringify(token) // This line is turning the token into a JSON string\n      setToken(data);\n      // console.log('Here is the token: ', token);\n      // console.log('Here is json stringify version of token: ', JSON.stringify(token));\n      dispatch({\n        type: 'LOGIN',\n        payload: {\n          username,\n          password\n        }\n      });\n      navigate(\"/login/page\");\n    };\n\n    // const fetchToken = async () =>{\n    // const responseT = await fetch('http://localhost:8080/me', {\n    //     headers: {\n    //         'Content-Type': 'application/json',\n    //         'Authorization' : 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMSIsImlhdCI6MTczNTMzMTUyMywiZXhwIjoxNzM1MzM1MTIzfQ.jgGCf7aekWFgo_0qKjmnvhLhs8iz8DaN0FmMfq-PBtc',\n    //         'Access-Control-Allow-Origin': \"*\"\n    //     },\n    //     credentials : 'include'\n    // }).then(response => {\n    //     if(!response.ok){\n    //         throw new Error(`HTTP error status: ${response.status}`);\n    //     }\n    //     console.log(\"Here is the promise: \", response.text().then(data =>\n    //     {\n    //         console.log('Here is data: ', data)\n    //     }\n    //     ));\n    // }).catch(error => {\n    //     console.error('The Fetch failed: ', error);\n    // });\n\n    //     const responseValidToken = await fetch(\"http://localhost:8080/me\", {\n    //         headers: {\n    //             'Content-Type': 'application/json',\n    //             'Authorization' : 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMSIsImlhdCI6MTczNTM0OTAzMywiZXhwIjoxNzM1MzUyNjMzfQ.pnO3E0MHA58s1GIt4m4N38VhTOAl68uV-uN37tkunsY',\n    //             'Access-Control-Allow-Origin': \"*\"\n    //             },\n    //             credentials : 'include'\n    //     });\n\n    //     const userToken = await responseValidToken.text();\n    //     console.log(userToken);\n\n    // }\n    fetchData();\n    // fetchToken();\n\n    // console.log(username, password);\n  }\n\n  // Function to handle register button on login page, redirect to register page.\n  function handleRegister(event) {\n    event.preventDefault();\n    navigate('/register');\n  }\n\n  // This return statement uses UserLogin page as its display and populates the data it needs to display.\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(UserLogin, {\n      username: username,\n      setUsername: setUsername,\n      password: password,\n      setPassword: setPassword,\n      handleSubmit: handleSubmit,\n      handleRegister: handleRegister\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(UserManagement, \"5pEZJ4WCV+cPeaVDLWOYJAMUkRM=\", false, function () {\n  return [useNavigate];\n});\n_c = UserManagement;\nexport default UserManagement;\nvar _c;\n$RefreshReg$(_c, \"UserManagement\");","map":{"version":3,"names":["React","useContext","useEffect","useState","UserLogin","AuthContext","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","UserManagement","_s","username","setUsername","password","setPassword","token","setToken","navigate","context","Error","dispatch","console","log","localStorage","setItem","JSON","stringify","handleSubmit","event","preventDefault","fetchData","response","fetch","method","headers","body","ok","status","data","text","type","payload","handleRegister","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/htham/Documents/Revature/InfoSysTraining/project_2_trackr/revProj2/frontend/revproj2/src/Components/UserLogin/UserManagement.tsx"],"sourcesContent":["import React, { FormEvent, useContext, useEffect, useState } from 'react'\r\nimport UserLogin from './UserLogin';\r\nimport { AuthContext } from '../UserContext/UserContext';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\n// Contains the logic for the UserLogin page and what to do with the input/submit button interaction\r\nfunction UserManagement() {\r\n    const[username, setUsername] = useState(\"\");\r\n    const[password, setPassword] = useState(\"\");\r\n    const [token, setToken] = useState(\"\");\r\n    const navigate = useNavigate();\r\n\r\n    const context = useContext(AuthContext);\r\n    if(!context){\r\n        throw new Error(\"Login must be used within an AuthProvider\")\r\n    }\r\n    const {dispatch} = context;\r\n\r\n    useEffect(() => {\r\n        console.log(\"Here is token after state change: \", token)\r\n        localStorage.setItem('token', JSON.stringify(token))\r\n    }, [token])\r\n\r\n    // Function to handle submit event on login page\r\n    function handleSubmit(event: FormEvent){\r\n        event.preventDefault();\r\n        const fetchData = async () => {\r\n            const response = await fetch('http://localhost:8080/login', {\r\n                method: 'POST',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({username, password})\r\n            });\r\n            \r\n            if(!response.ok){\r\n                throw new Error(`Here is the HTTP error status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.text(); // This line is used to get the token sent back from spring boot and update our token state.\r\n            // const jsonData = JSON.stringify(token) // This line is turning the token into a JSON string\r\n            setToken(data);\r\n            // console.log('Here is the token: ', token);\r\n            // console.log('Here is json stringify version of token: ', JSON.stringify(token));\r\n            dispatch({type: 'LOGIN', payload: {username, password}})\r\n            navigate(\"/login/page\");\r\n        }\r\n\r\n        // const fetchToken = async () =>{\r\n            // const responseT = await fetch('http://localhost:8080/me', {\r\n            //     headers: {\r\n            //         'Content-Type': 'application/json',\r\n            //         'Authorization' : 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMSIsImlhdCI6MTczNTMzMTUyMywiZXhwIjoxNzM1MzM1MTIzfQ.jgGCf7aekWFgo_0qKjmnvhLhs8iz8DaN0FmMfq-PBtc',\r\n            //         'Access-Control-Allow-Origin': \"*\"\r\n            //     },\r\n            //     credentials : 'include'\r\n            // }).then(response => {\r\n            //     if(!response.ok){\r\n            //         throw new Error(`HTTP error status: ${response.status}`);\r\n            //     }\r\n            //     console.log(\"Here is the promise: \", response.text().then(data =>\r\n            //     {\r\n            //         console.log('Here is data: ', data)\r\n            //     }\r\n            //     ));\r\n            // }).catch(error => {\r\n            //     console.error('The Fetch failed: ', error);\r\n            // });\r\n\r\n        //     const responseValidToken = await fetch(\"http://localhost:8080/me\", {\r\n        //         headers: {\r\n        //             'Content-Type': 'application/json',\r\n        //             'Authorization' : 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMSIsImlhdCI6MTczNTM0OTAzMywiZXhwIjoxNzM1MzUyNjMzfQ.pnO3E0MHA58s1GIt4m4N38VhTOAl68uV-uN37tkunsY',\r\n        //             'Access-Control-Allow-Origin': \"*\"\r\n        //             },\r\n        //             credentials : 'include'\r\n        //     });\r\n\r\n        //     const userToken = await responseValidToken.text();\r\n        //     console.log(userToken);\r\n\r\n        // }\r\n        fetchData();\r\n        // fetchToken();\r\n        \r\n        // console.log(username, password);\r\n    }\r\n\r\n    // Function to handle register button on login page, redirect to register page.\r\n    function handleRegister(event: FormEvent){\r\n        event.preventDefault();\r\n        navigate('/register');\r\n    }\r\n\r\n// This return statement uses UserLogin page as its display and populates the data it needs to display.\r\n  return (\r\n    <>\r\n        <UserLogin username={username} setUsername={setUsername} password={password} setPassword={setPassword} handleSubmit={handleSubmit} handleRegister={handleRegister}/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserManagement\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAeC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACzE,OAAOC,SAAS,MAAM,aAAa;AACnC,SAASC,WAAW,QAAQ,4BAA4B;AACxD,SAASC,WAAW,QAAQ,kBAAkB;;AAG9C;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAK,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC3C,MAAK,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC3C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMgB,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAE9B,MAAMc,OAAO,GAAGnB,UAAU,CAACI,WAAW,CAAC;EACvC,IAAG,CAACe,OAAO,EAAC;IACR,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;EAChE;EACA,MAAM;IAACC;EAAQ,CAAC,GAAGF,OAAO;EAE1BlB,SAAS,CAAC,MAAM;IACZqB,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEP,KAAK,CAAC;IACxDQ,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACX,KAAK,CAAC,CAAC;EACxD,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;;EAEX;EACA,SAASY,YAAYA,CAACC,KAAgB,EAAC;IACnCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;QACxDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAC,cAAc,EAAE;QAAkB,CAAC;QAC7CC,IAAI,EAAEV,IAAI,CAACC,SAAS,CAAC;UAACf,QAAQ;UAAEE;QAAQ,CAAC;MAC7C,CAAC,CAAC;MAEF,IAAG,CAACkB,QAAQ,CAACK,EAAE,EAAC;QACZ,MAAM,IAAIjB,KAAK,CAAC,kCAAkCY,QAAQ,CAACM,MAAM,EAAE,CAAC;MACxE;MAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAC;MACpC;MACAvB,QAAQ,CAACsB,IAAI,CAAC;MACd;MACA;MACAlB,QAAQ,CAAC;QAACoB,IAAI,EAAE,OAAO;QAAEC,OAAO,EAAE;UAAC9B,QAAQ;UAAEE;QAAQ;MAAC,CAAC,CAAC;MACxDI,QAAQ,CAAC,aAAa,CAAC;IAC3B,CAAC;;IAED;IACI;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACAa,SAAS,CAAC,CAAC;IACX;;IAEA;EACJ;;EAEA;EACA,SAASY,cAAcA,CAACd,KAAgB,EAAC;IACrCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtBZ,QAAQ,CAAC,WAAW,CAAC;EACzB;;EAEJ;EACE,oBACEX,OAAA,CAAAE,SAAA;IAAAmC,QAAA,eACIrC,OAAA,CAACJ,SAAS;MAACS,QAAQ,EAAEA,QAAS;MAACC,WAAW,EAAEA,WAAY;MAACC,QAAQ,EAAEA,QAAS;MAACC,WAAW,EAAEA,WAAY;MAACa,YAAY,EAAEA,YAAa;MAACe,cAAc,EAAEA;IAAe;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC,gBACtK,CAAC;AAEP;AAACrC,EAAA,CA5FQD,cAAc;EAAA,QAIFL,WAAW;AAAA;AAAA4C,EAAA,GAJvBvC,cAAc;AA8FvB,eAAeA,cAAc;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}