{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\htham\\\\Documents\\\\Revature\\\\InfoSysTraining\\\\project_2_trackr\\\\frontend\\\\revproj2\\\\src\\\\Components\\\\UserLogin\\\\LoginLandingPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport { AuthContext } from '../UserContext/UserContext';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginLandingPage() {\n  _s();\n  const [token, setToken] = useState(\"\"); // Creating useState variable for token\n  const navigate = useNavigate();\n  useEffect(() => {\n    // This useEffect will be called on render to grab token from local storage\n    const sessionTok = localStorage.getItem('token');\n    if (sessionTok) {\n      setToken(JSON.parse(sessionTok));\n    }\n    navigate(\"/calendar\");\n  }, []);\n  useEffect(() => {\n    // This useEffect checks our me endpoint in springboot to see if current user token is valid.\n    const userValidToken = async () => {\n      const responseValidToken = await fetch(\"http://localhost:8080/me\", {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n          'Access-Control-Allow-Origin': \"*\"\n        },\n        credentials: 'include'\n      });\n      const userToken = await responseValidToken.text();\n      console.log(userToken);\n    };\n    userValidToken();\n  }, [token]);\n  const context = useContext(AuthContext);\n  console.log(\"Here is token: \", token);\n  if (!context) {\n    throw new Error(\"Login must be used within an AuthProvider\");\n  }\n  const {\n    state,\n    dispatch\n  } = context;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"LoginLandingPage\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginLandingPage, \"KpHlqZEDjnM6PSdahhmWlmaJD7M=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginLandingPage;\nexport default LoginLandingPage;\nvar _c;\n$RefreshReg$(_c, \"LoginLandingPage\");","map":{"version":3,"names":["React","useContext","useEffect","useState","AuthContext","useNavigate","jsxDEV","_jsxDEV","LoginLandingPage","_s","token","setToken","navigate","sessionTok","localStorage","getItem","JSON","parse","userValidToken","responseValidToken","fetch","headers","credentials","userToken","text","console","log","context","Error","state","dispatch","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/htham/Documents/Revature/InfoSysTraining/project_2_trackr/frontend/revproj2/src/Components/UserLogin/LoginLandingPage.tsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\r\nimport { AuthContext } from '../UserContext/UserContext';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction LoginLandingPage() {\r\n  const [token, setToken] = useState(\"\"); // Creating useState variable for token\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => { // This useEffect will be called on render to grab token from local storage\r\n    const sessionTok = localStorage.getItem('token');\r\n    if(sessionTok){\r\n      setToken(JSON.parse(sessionTok));\r\n      }\r\n     navigate(\"/calendar\");\r\n     \r\n    \r\n  }, []);\r\n\r\n  useEffect(() => { // This useEffect checks our me endpoint in springboot to see if current user token is valid.\r\n    const userValidToken = async () =>{\r\n      const responseValidToken = await fetch(\"http://localhost:8080/me\", {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization' : `Bearer ${token}`,\r\n            'Access-Control-Allow-Origin': \"*\"\r\n            },\r\n            credentials : 'include'\r\n    });\r\n\r\n    const userToken = await responseValidToken.text();\r\n    console.log(userToken);\r\n\r\n    }\r\n    userValidToken();\r\n  }, [token]);\r\n  \r\n  const context = useContext(AuthContext);\r\n  console.log(\"Here is token: \",token);\r\n  if(!context){\r\n      throw new Error(\"Login must be used within an AuthProvider\")\r\n  }\r\n  const {state, dispatch} = context;\r\n\r\n  return (\r\n    <div>LoginLandingPage\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoginLandingPage\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,SAASC,WAAW,QAAQ,4BAA4B;AACxD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAMS,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAE9BH,SAAS,CAAC,MAAM;IAAE;IAChB,MAAMW,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,IAAGF,UAAU,EAAC;MACZF,QAAQ,CAACK,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;IAChC;IACDD,QAAQ,CAAC,WAAW,CAAC;EAGxB,CAAC,EAAE,EAAE,CAAC;EAENV,SAAS,CAAC,MAAM;IAAE;IAChB,MAAMgB,cAAc,GAAG,MAAAA,CAAA,KAAW;MAChC,MAAMC,kBAAkB,GAAG,MAAMC,KAAK,CAAC,0BAA0B,EAAE;QACjEC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,UAAUX,KAAK,EAAE;UACnC,6BAA6B,EAAE;QAC/B,CAAC;QACDY,WAAW,EAAG;MACtB,CAAC,CAAC;MAEF,MAAMC,SAAS,GAAG,MAAMJ,kBAAkB,CAACK,IAAI,CAAC,CAAC;MACjDC,OAAO,CAACC,GAAG,CAACH,SAAS,CAAC;IAEtB,CAAC;IACDL,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACR,KAAK,CAAC,CAAC;EAEX,MAAMiB,OAAO,GAAG1B,UAAU,CAACG,WAAW,CAAC;EACvCqB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAChB,KAAK,CAAC;EACpC,IAAG,CAACiB,OAAO,EAAC;IACR,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;EAChE;EACA,MAAM;IAACC,KAAK;IAAEC;EAAQ,CAAC,GAAGH,OAAO;EAEjC,oBACEpB,OAAA;IAAAwB,QAAA,EAAK;EACL;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAEV;AAAC1B,EAAA,CA3CQD,gBAAgB;EAAA,QAENH,WAAW;AAAA;AAAA+B,EAAA,GAFrB5B,gBAAgB;AA6CzB,eAAeA,gBAAgB;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}