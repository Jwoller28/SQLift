{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brets\\\\Documents\\\\Revature-Projects\\\\RevP2\\\\revProj2\\\\frontend\\\\revproj2\\\\src\\\\Components\\\\UserLogin\\\\UserManagement.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport UserLogin from './UserLogin';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../UserContext/UserContext';\n\n// Contains the logic for the UserLogin page and what to do with the input/submit button interaction\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction UserManagement() {\n  _s();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [token, setToken] = useState(\"\");\n  const navigate = useNavigate();\n  const {\n    login\n  } = useAuth();\n  //const context = useContext(UserContext);\n  // if(!context){\n  //     throw new Error(\"Login must be used within an AuthProvider\")\n  // }\n  //const {dispatch} = context;\n\n  useEffect(() => {\n    localStorage.setItem('token', JSON.stringify(token)); // This useEffect is used to store the users JWT token in the browsers local storage after they login, keeping their credentials accessible when needed on other pages.\n  }, [token]);\n\n  // Function to handle submit event on login page\n  function handleSubmit(event) {\n    event.preventDefault();\n    // if(context){\n    //     context.login(username, password);\n    //     login();\n    //     console.log(username, password);\n    // }\n    const fetchData = async () => {\n      const response = await fetch('http://localhost:8080/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n\n      // If response is not ok, give user an alert.\n      if (!response.ok) {\n        alert(`Invalid Credentials! Error Code: ${response.status}`);\n      } else {\n        // If response ok, update token state and go to calendar page\n        const data = await response.text(); // Gets returned JWT token\n        setToken(data);\n        login();\n        // dispatch({type: 'LOGIN', payload: {username, password}})\n        navigate(\"/calendar\");\n      }\n    };\n\n    // const fetchToken = async () =>{\n    // const responseT = await fetch('http://localhost:8080/me', {\n    //     headers: {\n    //         'Content-Type': 'application/json',\n    //         'Authorization' : 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMSIsImlhdCI6MTczNTMzMTUyMywiZXhwIjoxNzM1MzM1MTIzfQ.jgGCf7aekWFgo_0qKjmnvhLhs8iz8DaN0FmMfq-PBtc',\n    //         'Access-Control-Allow-Origin': \"*\"\n    //     },\n    //     credentials : 'include'\n    // }).then(response => {\n    //     if(!response.ok){\n    //         throw new Error(`HTTP error status: ${response.status}`);\n    //     }\n    //     console.log(\"Here is the promise: \", response.text().then(data =>\n    //     {\n    //         console.log('Here is data: ', data)\n    //     }\n    //     ));\n    // }).catch(error => {\n    //     console.error('The Fetch failed: ', error);\n    // });\n\n    //     const responseValidToken = await fetch(\"http://localhost:8080/me\", {\n    //         headers: {\n    //             'Content-Type': 'application/json',\n    //             'Authorization' : 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMSIsImlhdCI6MTczNTM0OTAzMywiZXhwIjoxNzM1MzUyNjMzfQ.pnO3E0MHA58s1GIt4m4N38VhTOAl68uV-uN37tkunsY',\n    //             'Access-Control-Allow-Origin': \"*\"\n    //             },\n    //             credentials : 'include'\n    //     });\n\n    //     const userToken = await responseValidToken.text();\n    //     console.log(userToken);\n\n    // }\n    fetchData();\n    // fetchToken();\n  }\n\n  // Function to handle register button on login page, redirect to register page.\n  function handleRegister(event) {\n    event.preventDefault();\n    navigate('/register');\n  }\n\n  // This return statement uses UserLogin page as its display and populates the data it needs to display.\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(UserLogin, {\n      username: username,\n      setUsername: setUsername,\n      password: password,\n      setPassword: setPassword,\n      handleSubmit: handleSubmit,\n      handleRegister: handleRegister\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(UserManagement, \"NEYNnAInuWj7QjGV/TfuJ3RigXg=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c = UserManagement;\nexport default UserManagement;\nvar _c;\n$RefreshReg$(_c, \"UserManagement\");","map":{"version":3,"names":["React","useEffect","useState","UserLogin","useNavigate","useAuth","jsxDEV","_jsxDEV","Fragment","_Fragment","UserManagement","_s","username","setUsername","password","setPassword","token","setToken","navigate","login","localStorage","setItem","JSON","stringify","handleSubmit","event","preventDefault","fetchData","response","fetch","method","headers","body","ok","alert","status","data","text","handleRegister","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/brets/Documents/Revature-Projects/RevP2/revProj2/frontend/revproj2/src/Components/UserLogin/UserManagement.tsx"],"sourcesContent":["import React, { FormEvent, useContext, useEffect, useState } from 'react'\r\nimport UserLogin from './UserLogin';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { AuthContext, useAuth, UserContext } from '../UserContext/UserContext';\r\n\r\n\r\n// Contains the logic for the UserLogin page and what to do with the input/submit button interaction\r\nfunction UserManagement() {\r\n    const[username, setUsername] = useState(\"\");\r\n    const[password, setPassword] = useState(\"\");\r\n    const [token, setToken] = useState(\"\");\r\n    const navigate = useNavigate();\r\n\r\n    const {login} = useAuth();\r\n    //const context = useContext(UserContext);\r\n    // if(!context){\r\n    //     throw new Error(\"Login must be used within an AuthProvider\")\r\n    // }\r\n    //const {dispatch} = context;\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('token', JSON.stringify(token))    // This useEffect is used to store the users JWT token in the browsers local storage after they login, keeping their credentials accessible when needed on other pages.\r\n    }, [token])\r\n\r\n    // Function to handle submit event on login page\r\n    function handleSubmit(event: FormEvent){\r\n        event.preventDefault();\r\n        // if(context){\r\n        //     context.login(username, password);\r\n        //     login();\r\n        //     console.log(username, password);\r\n        // }\r\n        const fetchData = async () => {\r\n            const response = await fetch('http://localhost:8080/login', {\r\n                method: 'POST',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({username, password})\r\n            });\r\n            \r\n            // If response is not ok, give user an alert.\r\n            if(!response.ok){\r\n                alert(`Invalid Credentials! Error Code: ${response.status}`);\r\n            }\r\n            else{ \r\n                // If response ok, update token state and go to calendar page\r\n                const data = await response.text(); // Gets returned JWT token\r\n                setToken(data);\r\n                login();\r\n                // dispatch({type: 'LOGIN', payload: {username, password}})\r\n                navigate(\"/calendar\");\r\n            }\r\n        }\r\n\r\n        // const fetchToken = async () =>{\r\n            // const responseT = await fetch('http://localhost:8080/me', {\r\n            //     headers: {\r\n            //         'Content-Type': 'application/json',\r\n            //         'Authorization' : 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMSIsImlhdCI6MTczNTMzMTUyMywiZXhwIjoxNzM1MzM1MTIzfQ.jgGCf7aekWFgo_0qKjmnvhLhs8iz8DaN0FmMfq-PBtc',\r\n            //         'Access-Control-Allow-Origin': \"*\"\r\n            //     },\r\n            //     credentials : 'include'\r\n            // }).then(response => {\r\n            //     if(!response.ok){\r\n            //         throw new Error(`HTTP error status: ${response.status}`);\r\n            //     }\r\n            //     console.log(\"Here is the promise: \", response.text().then(data =>\r\n            //     {\r\n            //         console.log('Here is data: ', data)\r\n            //     }\r\n            //     ));\r\n            // }).catch(error => {\r\n            //     console.error('The Fetch failed: ', error);\r\n            // });\r\n\r\n        //     const responseValidToken = await fetch(\"http://localhost:8080/me\", {\r\n        //         headers: {\r\n        //             'Content-Type': 'application/json',\r\n        //             'Authorization' : 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyMSIsImlhdCI6MTczNTM0OTAzMywiZXhwIjoxNzM1MzUyNjMzfQ.pnO3E0MHA58s1GIt4m4N38VhTOAl68uV-uN37tkunsY',\r\n        //             'Access-Control-Allow-Origin': \"*\"\r\n        //             },\r\n        //             credentials : 'include'\r\n        //     });\r\n\r\n        //     const userToken = await responseValidToken.text();\r\n        //     console.log(userToken);\r\n\r\n        // }\r\n        fetchData();\r\n        // fetchToken();\r\n    }\r\n\r\n    // Function to handle register button on login page, redirect to register page.\r\n    function handleRegister(event: FormEvent){\r\n        event.preventDefault();\r\n        navigate('/register');\r\n    }\r\n\r\n// This return statement uses UserLogin page as its display and populates the data it needs to display.\r\n  return (\r\n    <>\r\n        <UserLogin username={username} setUsername={setUsername} password={password} setPassword={setPassword} handleSubmit={handleSubmit} handleRegister={handleRegister}/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default UserManagement"],"mappings":";;AAAA,OAAOA,KAAK,IAA2BC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACzE,OAAOC,SAAS,MAAM,aAAa;AACnC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAAsBC,OAAO,QAAqB,4BAA4B;;AAG9E;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAK,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC3C,MAAK,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC3C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMgB,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAE9B,MAAM;IAACe;EAAK,CAAC,GAAGd,OAAO,CAAC,CAAC;EACzB;EACA;EACA;EACA;EACA;;EAEAJ,SAAS,CAAC,MAAM;IACZmB,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACP,KAAK,CAAC,CAAC,EAAI;EAC5D,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;;EAEX;EACA,SAASQ,YAAYA,CAACC,KAAgB,EAAC;IACnCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB;IACA;IACA;IACA;IACA;IACA,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;QACxDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAC,cAAc,EAAE;QAAkB,CAAC;QAC7CC,IAAI,EAAEV,IAAI,CAACC,SAAS,CAAC;UAACX,QAAQ;UAAEE;QAAQ,CAAC;MAC7C,CAAC,CAAC;;MAEF;MACA,IAAG,CAACc,QAAQ,CAACK,EAAE,EAAC;QACZC,KAAK,CAAC,oCAAoCN,QAAQ,CAACO,MAAM,EAAE,CAAC;MAChE,CAAC,MACG;QACA;QACA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;QACpCpB,QAAQ,CAACmB,IAAI,CAAC;QACdjB,KAAK,CAAC,CAAC;QACP;QACAD,QAAQ,CAAC,WAAW,CAAC;MACzB;IACJ,CAAC;;IAED;IACI;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACAS,SAAS,CAAC,CAAC;IACX;EACJ;;EAEA;EACA,SAASW,cAAcA,CAACb,KAAgB,EAAC;IACrCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtBR,QAAQ,CAAC,WAAW,CAAC;EACzB;;EAEJ;EACE,oBACEX,OAAA,CAAAE,SAAA;IAAA8B,QAAA,eACIhC,OAAA,CAACJ,SAAS;MAACS,QAAQ,EAAEA,QAAS;MAACC,WAAW,EAAEA,WAAY;MAACC,QAAQ,EAAEA,QAAS;MAACC,WAAW,EAAEA,WAAY;MAACS,YAAY,EAAEA,YAAa;MAACc,cAAc,EAAEA;IAAe;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC,gBACtK,CAAC;AAEP;AAAChC,EAAA,CAhGQD,cAAc;EAAA,QAIFN,WAAW,EAEZC,OAAO;AAAA;AAAAuC,EAAA,GANlBlC,cAAc;AAkGvB,eAAeA,cAAc;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}