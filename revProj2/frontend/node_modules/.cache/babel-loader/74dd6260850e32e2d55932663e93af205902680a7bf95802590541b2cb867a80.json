{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\htham\\\\Documents\\\\Revature\\\\InfoSysTraining\\\\project_2_trackr\\\\revProj2\\\\frontend\\\\src\\\\COMPONENTS\\\\POSTFEED\\\\PostList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getPosts } from '../../API/Axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PostList() {\n  _s();\n  const [posts, setPosts] = useState([]);\n\n  // Start polling function with delay\n  const startPolling = async () => {\n    while (true) {\n      try {\n        const newPost = await getPosts();\n        if (!newPost) {\n          continue;\n        }\n        console.log(\"New Post: \" + newPost);\n        setPosts(prevPosts => [newPost, ...prevPosts]); // Appends at the start of the list\n      } catch (error) {\n        console.error(\"Error during polling:\", error);\n      }\n\n      // Delay between polling requests (e.g., 5 seconds)\n      await new Promise(resolve => setTimeout(resolve, 5000)); // Adjust polling interval as needed\n    }\n  };\n  useEffect(() => {\n    startPolling(); // Start polling when component mounts\n  }, []); // Empty dependency array ensures it runs only once\n\n  function cleanBase64(base64) {\n    if (!base64) {\n      console.error(\"Received an invalid base64 string:\", base64);\n      return ''; // Return an empty string if base64 is undefined or null\n    }\n    return base64.replace(/[\\r\\n]/g, \"\").replace(/\\s/g, \"\");\n  }\n  function binaryStringToImage(binaryData) {\n    if (!binaryData) {\n      console.error(\"No binary data provided:\", binaryData);\n      return ''; // Return a default or placeholder image if data is missing\n    }\n    const cleanData = cleanBase64(binaryData); // Clean base64 string\n    const binaryString = atob(cleanData); // Decoding the base64 binary string\n    const byteArray = new Uint8Array(binaryString.length);\n\n    // Convert the binary string to a byte array\n    for (let i = 0; i < binaryString.length; i++) {\n      byteArray[i] = binaryString.charCodeAt(i);\n    }\n\n    // Create a Blob from the byte array and use Object URL\n    const blob = new Blob([byteArray], {\n      type: 'image/png'\n    }); // Update MIME type if needed\n    const url = URL.createObjectURL(blob);\n    return url;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Consumed Messages: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"Goal ID: \", post.goal_id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"User ID: \", post.user_id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Messge Text: \", post.message_text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          loading: \"lazy\",\n          src: binaryStringToImage(post.photo),\n          width: \"200\",\n          height: \"auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 23\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 7\n  }, this);\n}\n_s(PostList, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useEffect","useState","getPosts","jsxDEV","_jsxDEV","PostList","_s","posts","setPosts","startPolling","newPost","console","log","prevPosts","error","Promise","resolve","setTimeout","cleanBase64","base64","replace","binaryStringToImage","binaryData","cleanData","binaryString","atob","byteArray","Uint8Array","length","i","charCodeAt","blob","Blob","type","url","URL","createObjectURL","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","index","goal_id","user_id","message_text","loading","src","photo","width","height","_c","$RefreshReg$"],"sources":["C:/Users/htham/Documents/Revature/InfoSysTraining/project_2_trackr/revProj2/frontend/src/COMPONENTS/POSTFEED/PostList.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { getPosts } from '../../API/Axios';\r\n\r\nexport interface Post {\r\n    // post_id:number;\r\n    goal_id:number;\r\n    user_id:number;\r\n    message_text:string;\r\n    photo: string;\r\n\r\n}\r\n\r\nfunction PostList() {\r\n  const [posts, setPosts] = useState<Post[]>([]);\r\n\r\n  // Start polling function with delay\r\n  const startPolling = async () => {\r\n      while (true) {\r\n          try {\r\n              const newPost = await getPosts();\r\n              if(!newPost)\r\n              {\r\n                continue;\r\n              }\r\n              console.log(\"New Post: \" + newPost)\r\n              setPosts((prevPosts) => [newPost, ...prevPosts]); // Appends at the start of the list\r\n              }\r\n          catch (error) {\r\n              console.error(\"Error during polling:\", error);\r\n          }\r\n\r\n          // Delay between polling requests (e.g., 5 seconds)\r\n          await new Promise((resolve) => setTimeout(resolve, 5000)); // Adjust polling interval as needed\r\n      }\r\n  };\r\n\r\n  useEffect(() => {\r\n      startPolling(); // Start polling when component mounts\r\n  }, []); // Empty dependency array ensures it runs only once\r\n\r\n\r\n  function cleanBase64(base64: string | undefined): string {\r\n    if (!base64) {\r\n        console.error(\"Received an invalid base64 string:\", base64);\r\n        return '';  // Return an empty string if base64 is undefined or null\r\n    }\r\n    return base64.replace(/[\\r\\n]/g, \"\").replace(/\\s/g, \"\");\r\n  }\r\n\r\n\r\n  function binaryStringToImage(binaryData: string | undefined): string {\r\n    if (!binaryData) {\r\n        console.error(\"No binary data provided:\", binaryData);\r\n        return '';  // Return a default or placeholder image if data is missing\r\n    }\r\n    \r\n    const cleanData = cleanBase64(binaryData); // Clean base64 string\r\n    const binaryString = atob(cleanData); // Decoding the base64 binary string\r\n    const byteArray = new Uint8Array(binaryString.length);\r\n\r\n    // Convert the binary string to a byte array\r\n    for (let i = 0; i < binaryString.length; i++) {\r\n        byteArray[i] = binaryString.charCodeAt(i);\r\n    }\r\n\r\n    // Create a Blob from the byte array and use Object URL\r\n    const blob = new Blob([byteArray], { type: 'image/png' }); // Update MIME type if needed\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    return url;\r\n}\r\n\r\n    return (\r\n      <div>\r\n          <h3>Consumed Messages: </h3>\r\n            <div>\r\n            {posts.map((post,index) => (\r\n                      <div key = {index}>\r\n                        <h5>Goal ID: {post.goal_id}</h5>\r\n                        <p>User ID: {post.user_id}</p>\r\n                        <p>Messge Text: {post.message_text}</p>\r\n                        <img loading=\"lazy\" src = {binaryStringToImage(post.photo)} width=\"200\" height=\"auto\"></img>\r\n                        </div>\r\n                  ))}\r\n            </div>\r\n      </div>\r\n      )\r\n    }\r\n  \r\n  export default PostList\r\n\r\n  \r\n  \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}