{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\htham\\\\Documents\\\\Revature\\\\InfoSysTraining\\\\project_2_trackr\\\\revProj2\\\\frontend\\\\src\\\\COMPONENTS\\\\POSTFEED\\\\PostFeedSmart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport PostFeedDumb from './PostFeedDumb';\nimport { useRef } from 'react';\nimport { sendPost } from '../../API/Axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction PostFeedSmart() {\n  _s();\n  const [message, setMessage] = useState(\"\");\n  const [goalId, setGoalId] = useState(0);\n  const [user, setUser] = useState(0);\n  const [file, setFile] = useState(undefined);\n  const formRef = useRef(null);\n  const handleSubmit = async e => {\n    var _formRef$current;\n    e.preventDefault();\n    let formData = new FormData();\n    formData.append('goal_id', goalId.toString());\n    formData.append('user_id', user.toString());\n    formData.append('message_text', message);\n    if (file) {\n      formData.append('photo', file);\n    }\n\n    // console.log(\"Before\");\n    // console.log(formData.get(\"goal_id\"));\n    // console.log(formData.get(\"user_id\"));\n    // console.log(formData.get(\"message_text\"));\n    // console.log(formData.get(\"photo\"));\n    const sendData = async () => {\n      try {\n        // Send the post data and wait for it to finish\n        await sendPost(formData);\n        console.log(\"During\");\n\n        // Clear the formData after sending\n        formData.delete(\"goal_id\");\n        formData.delete(\"user_id\");\n        formData.delete(\"message_text\");\n        formData.delete(\"photo\");\n\n        // Now that the post is sent, retrieve the updated posts\n      } catch (error) {\n        console.error(\"Error in sending data:\", error);\n      }\n    };\n    // Call the sendData function\n    sendData();\n    (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.reset();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(PostFeedDumb, {\n        formRef: formRef,\n        setFile: setFile,\n        setMessage: setMessage,\n        setGoalId: setGoalId,\n        setUser: setUser,\n        onSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 14\n    }, this)\n  }, void 0, false);\n}\n_s(PostFeedSmart, \"2XTKs/eKFk6kM+22tNq5OEmypJw=\");\n_c = PostFeedSmart;\nexport default PostFeedSmart;\nvar _c;\n$RefreshReg$(_c, \"PostFeedSmart\");","map":{"version":3,"names":["React","useState","PostFeedDumb","useRef","sendPost","jsxDEV","_jsxDEV","Fragment","_Fragment","PostFeedSmart","_s","message","setMessage","goalId","setGoalId","user","setUser","file","setFile","undefined","formRef","handleSubmit","e","_formRef$current","preventDefault","formData","FormData","append","toString","sendData","console","log","delete","error","current","reset","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/htham/Documents/Revature/InfoSysTraining/project_2_trackr/revProj2/frontend/src/COMPONENTS/POSTFEED/PostFeedSmart.tsx"],"sourcesContent":["import React, { MutableRefObject, useState } from 'react'\r\nimport PostFeedDumb from './PostFeedDumb';\r\nimport { useRef } from 'react';\r\nimport {getPosts, sendPost } from '../../API/Axios';\r\nimport PostList, { Post } from './PostList';\r\nimport { restElement } from '@babel/types';\r\n\r\n\r\nfunction PostFeedSmart() {\r\n    const [message, setMessage] = useState(\"\");\r\n    const [goalId, setGoalId] = useState(0);\r\n    const [user, setUser] = useState(0);\r\n    const [file, setFile] = useState<File | undefined>(undefined);\r\n    const formRef : MutableRefObject<HTMLFormElement | null> = useRef(null);\r\n\r\n    const handleSubmit = async (e : any) => {\r\n        e.preventDefault();\r\n        let formData = new FormData();\r\n        formData.append('goal_id', goalId.toString());\r\n        formData.append('user_id', user.toString());\r\n        formData.append('message_text', message);\r\n    \r\n        if (file) {\r\n            formData.append('photo', file);\r\n        }\r\n\r\n        // console.log(\"Before\");\r\n        // console.log(formData.get(\"goal_id\"));\r\n        // console.log(formData.get(\"user_id\"));\r\n        // console.log(formData.get(\"message_text\"));\r\n        // console.log(formData.get(\"photo\"));\r\n        const sendData = async () => {\r\n            try {\r\n                // Send the post data and wait for it to finish\r\n                await sendPost(formData);\r\n                console.log(\"During\");\r\n        \r\n                // Clear the formData after sending\r\n                formData.delete(\"goal_id\");\r\n                formData.delete(\"user_id\");\r\n                formData.delete(\"message_text\");\r\n                formData.delete(\"photo\");\r\n        \r\n                // Now that the post is sent, retrieve the updated posts\r\n            } catch (error) {\r\n                console.error(\"Error in sending data:\", error);\r\n            }\r\n        };\r\n        // Call the sendData function\r\n        sendData();\r\n        \r\n            \r\n        formRef.current?.reset();\r\n            \r\n          }\r\n        \r\n        \r\n\r\n    return (\r\n       \r\n        <>\r\n             <div>\r\n            <PostFeedDumb formRef = {formRef} setFile = {setFile} setMessage = {setMessage} setGoalId= {setGoalId} setUser = {setUser} onSubmit = {handleSubmit}></PostFeedDumb>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default PostFeedSmart;"],"mappings":";;AAAA,OAAOA,KAAK,IAAsBC,QAAQ,QAAQ,OAAO;AACzD,OAAOC,YAAY,MAAM,gBAAgB;AACzC,SAASC,MAAM,QAAQ,OAAO;AAC9B,SAAkBC,QAAQ,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAKpD,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACgB,IAAI,EAAEC,OAAO,CAAC,GAAGjB,QAAQ,CAAmBkB,SAAS,CAAC;EAC7D,MAAMC,OAAkD,GAAGjB,MAAM,CAAC,IAAI,CAAC;EAEvE,MAAMkB,YAAY,GAAG,MAAOC,CAAO,IAAK;IAAA,IAAAC,gBAAA;IACpCD,CAAC,CAACE,cAAc,CAAC,CAAC;IAClB,IAAIC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC7BD,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEd,MAAM,CAACe,QAAQ,CAAC,CAAC,CAAC;IAC7CH,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEZ,IAAI,CAACa,QAAQ,CAAC,CAAC,CAAC;IAC3CH,QAAQ,CAACE,MAAM,CAAC,cAAc,EAAEhB,OAAO,CAAC;IAExC,IAAIM,IAAI,EAAE;MACNQ,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEV,IAAI,CAAC;IAClC;;IAEA;IACA;IACA;IACA;IACA;IACA,MAAMY,QAAQ,GAAG,MAAAA,CAAA,KAAY;MACzB,IAAI;QACA;QACA,MAAMzB,QAAQ,CAACqB,QAAQ,CAAC;QACxBK,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;;QAErB;QACAN,QAAQ,CAACO,MAAM,CAAC,SAAS,CAAC;QAC1BP,QAAQ,CAACO,MAAM,CAAC,SAAS,CAAC;QAC1BP,QAAQ,CAACO,MAAM,CAAC,cAAc,CAAC;QAC/BP,QAAQ,CAACO,MAAM,CAAC,OAAO,CAAC;;QAExB;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAClD;IACJ,CAAC;IACD;IACAJ,QAAQ,CAAC,CAAC;IAGV,CAAAN,gBAAA,GAAAH,OAAO,CAACc,OAAO,cAAAX,gBAAA,uBAAfA,gBAAA,CAAiBY,KAAK,CAAC,CAAC;EAEtB,CAAC;EAIP,oBAEI7B,OAAA,CAAAE,SAAA;IAAA4B,QAAA,eACK9B,OAAA;MAAA8B,QAAA,eACD9B,OAAA,CAACJ,YAAY;QAACkB,OAAO,EAAIA,OAAQ;QAACF,OAAO,EAAIA,OAAQ;QAACN,UAAU,EAAIA,UAAW;QAACE,SAAS,EAAGA,SAAU;QAACE,OAAO,EAAIA,OAAQ;QAACqB,QAAQ,EAAIhB;MAAa;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAe;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/J;EAAC,gBACR,CAAC;AAEX;AAAC/B,EAAA,CA1DQD,aAAa;AAAAiC,EAAA,GAAbjC,aAAa;AA2DtB,eAAeA,aAAa;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}