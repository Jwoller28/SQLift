{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\htham\\\\Documents\\\\Revature\\\\InfoSysTraining\\\\project_2_trackr\\\\revProj2\\\\frontend\\\\src\\\\COMPONENTS\\\\POSTFEED\\\\PostList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { getPosts } from '../../API/Axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PostList() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const startPolling = async () => {\n    while (true) {\n      try {\n        const newPosts = await getPosts();\n        if (posts) {\n          setPosts(newPosts.concat(posts));\n        }\n      } catch (error) {\n        console.error(\"Error during polling:\", error);\n      }\n    }\n  };\n  useEffect(() => {\n    startPolling();\n  }, []); // Start polling on component mount\n\n  function binaryStringToImage(binaryData) {\n    const binaryString = atob(binaryData); // Decoding the base64 binary string\n    const byteArray = new Uint8Array(binaryString.length);\n\n    // Convert the binary string to a byte array\n    for (let i = 0; i < binaryString.length; i++) {\n      byteArray[i] = binaryString.charCodeAt(i);\n    }\n\n    // Create a Blob from the byte array and use Object URL\n    const blob = new Blob([byteArray], {\n      type: 'image/png'\n    }); // Update the MIME type if needed (e.g., 'image/jpeg')\n    const url = URL.createObjectURL(blob);\n    return url;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Consumed Messages: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"Goal ID: \", post.goal_id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"User ID: \", post.user_id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Messge Text: \", post.message_text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          loading: \"lazy\",\n          src: binaryStringToImage(post.photo),\n          width: \"200\",\n          height: \"auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 23\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 7\n  }, this);\n}\n_s(PostList, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = PostList;\nexport default PostList;\nvar _c;\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"names":["React","useEffect","useState","getPosts","jsxDEV","_jsxDEV","PostList","_s","posts","setPosts","startPolling","newPosts","concat","error","console","binaryStringToImage","binaryData","binaryString","atob","byteArray","Uint8Array","length","i","charCodeAt","blob","Blob","type","url","URL","createObjectURL","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","index","goal_id","user_id","message_text","loading","src","photo","width","height","_c","$RefreshReg$"],"sources":["C:/Users/htham/Documents/Revature/InfoSysTraining/project_2_trackr/revProj2/frontend/src/COMPONENTS/POSTFEED/PostList.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { getPosts } from '../../API/Axios';\r\n\r\nexport interface Post {\r\n    // post_id:number;\r\n    goal_id:number;\r\n    user_id:number;\r\n    message_text:string;\r\n    photo: string;\r\n\r\n}\r\n\r\nfunction PostList() {\r\n    const [posts, setPosts] = useState<Post[]>([]);\r\n    \r\n    const startPolling = async () => {\r\n      while (true) {\r\n          try {\r\n              const newPosts = await getPosts();\r\n              if (posts) {\r\n                  setPosts(newPosts.concat(posts));\r\n              }\r\n          } catch (error) {\r\n              console.error(\"Error during polling:\", error);\r\n          }\r\n      }\r\n  };\r\n\r\n    useEffect(() => {\r\n      startPolling();\r\n    }, []); // Start polling on component mount\r\n\r\n\r\n\r\n    function binaryStringToImage(binaryData : string) {\r\n            const binaryString = atob(binaryData); // Decoding the base64 binary string\r\n            const byteArray = new Uint8Array(binaryString.length);\r\n      \r\n            // Convert the binary string to a byte array\r\n            for (let i = 0; i < binaryString.length; i++) {\r\n              byteArray[i] = binaryString.charCodeAt(i);\r\n            }\r\n      \r\n            // Create a Blob from the byte array and use Object URL\r\n            const blob = new Blob([byteArray], { type: 'image/png' }); // Update the MIME type if needed (e.g., 'image/jpeg')\r\n            const url = URL.createObjectURL(blob);\r\n            \r\n            return url;\r\n        }\r\n    return (\r\n      <div>\r\n          <h3>Consumed Messages: </h3>\r\n            <div>\r\n            {posts.map((post,index) => (\r\n                      <div key = {index}>\r\n                        <h5>Goal ID: {post.goal_id}</h5>\r\n                        <p>User ID: {post.user_id}</p>\r\n                        <p>Messge Text: {post.message_text}</p>\r\n                        <img loading=\"lazy\" src = {binaryStringToImage(post.photo)} width=\"200\" height=\"auto\"></img>\r\n                        </div>\r\n                  ))}\r\n            </div>\r\n      </div>\r\n      )\r\n    }\r\n  \r\n  export default PostList\r\n\r\n  \r\n  \r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}