{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\htham\\\\Documents\\\\Revature\\\\InfoSysTraining\\\\project_2_trackr\\\\revProj2\\\\frontend\\\\revproj2\\\\src\\\\Calendar\\\\InputPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NUTRITION_API_KEY = 'gg1FPG2C5LRmeHth7W78aQ==AzZg9ImEsiX2oEbc';\nfunction InputPage() {\n  _s();\n  const {\n    dayId\n  } = useParams(); // e.g. \"2024-12-20\"\n  const navigate = useNavigate();\n\n  // We’ll fetch userId & goalId on mount:\n  const [userId, setUserId] = useState(null);\n  const [goalId, setGoalId] = useState(null);\n\n  // ---------- State for exercise ----------\n  const [caloriesBurned, setCaloriesBurned] = useState('');\n  const [workouts, setWorkouts] = useState([]);\n  const [time, setTime] = useState('');\n  const [totalVolume, setTotalVolume] = useState(0);\n\n  // ---------- State for sleep ----------\n  const [hoursSlept, setHoursSlept] = useState('');\n\n  // ---------- State for water ----------\n  const [waterIntake, setWaterIntake] = useState('');\n\n  // ---------- State for nutrition ----------\n  // The user’s weight, plus macros from foods\n  const [weight, setWeight] = useState('');\n\n  // Foods typed by the user\n  const [foods, setFoods] = useState([]);\n  const [userToken, setToken] = useState('');\n  const [userName, setName] = useState('');\n\n  // Summed macros from the API calls\n  const [nutritionTotals, setNutritionTotals] = useState({\n    calories: 0,\n    carbs: 0,\n    fat: 0,\n    protein: 0\n  });\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      setToken(JSON.parse(token));\n    } else {\n      console.error('No token found. Please log in first.');\n      return;\n    }\n  }, []);\n  useEffect(() => {\n    const fetchMe = async () => {\n      try {\n        // 1) GET /me to get username\n        const meRes = await fetch(\"http://localhost:8080/me\", {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${userToken}`,\n            'Access-Control-Allow-Origin': \"*\"\n          },\n          credentials: 'include'\n        });\n        if (!meRes.ok) {\n          throw new Error(`GET /me failed: ${meRes.status}`);\n        }\n        const username = await meRes.text(); // e.g. \"user1\"\n        setName(username);\n      } catch (err) {\n        console.error('Error fetching user/goal:', err);\n      }\n    };\n    fetchMe();\n  }, [userToken]);\n  useEffect(() => {\n    if (userName) fetchUsername();\n  }, [userName]);\n  useEffect(() => {\n    if (userId) fetchGoal();\n  }, [userId]);\n  const fetchUsername = async () => {\n    // 2) GET /username/{username} to get user object (including id)\n    const userRes = await fetch(`http://localhost:8080/username/${userName}`, {\n      headers: {\n        Authorization: `Bearer ${userToken}`\n      }\n    });\n    if (!userRes.ok) {\n      throw new Error(`GET /username/${userName} failed: ${userRes.status}`);\n    }\n    const userObj = await userRes.json();\n    setUserId(userObj.id);\n  };\n  const fetchGoal = async () => {\n    // 3) GET /goalUser/{userId} to get the user’s goal object (including goalId)\n    const goalRes = await fetch(`http://localhost:8080/goalUser/${userId}`, {\n      headers: {\n        Authorization: `Bearer ${userToken}`\n      }\n    });\n    if (!goalRes.ok) {\n      throw new Error(`GET /goalUser/${userId} failed: ${goalRes.status}`);\n    }\n    const goalObj = await goalRes.json();\n    setGoalId(goalObj.id);\n    console.log(goalId);\n  };\n\n  // 2) Recalc totalVolume whenever workouts changes\n  useEffect(() => {\n    let total = 0;\n    workouts.forEach(w => {\n      const weightNum = parseFloat(w.weight) || 0;\n      const repsNum = parseFloat(w.reps) || 0;\n      const setsNum = parseFloat(w.sets) || 0;\n      total += weightNum * repsNum * setsNum;\n    });\n    setTotalVolume(total);\n  }, [workouts]);\n\n  // 3) Handling foods + calling the Nutrition API\n  const addFood = () => {\n    setFoods([...foods, {\n      name: ''\n    }]);\n  };\n  const updateFood = (index, value) => {\n    const updated = [...foods];\n    updated[index].name = value;\n    setFoods(updated);\n  };\n\n  // On “Fetch Nutrition” we’ll sum up all the foods from the API\n  const handleFetchNutrition = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found. Please log in first.');\n      return;\n    }\n    let totalCals = 0;\n    let totalCarbs = 0;\n    let totalFat = 0;\n    let totalProtein = 0;\n    for (let i = 0; i < foods.length; i++) {\n      const foodName = foods[i].name.trim();\n      if (!foodName) continue;\n      try {\n        const response = await fetch(`https://api.calorieninjas.com/v1/nutrition?query=${encodeURIComponent(foodName)}`, {\n          headers: {\n            'X-Api-Key': NUTRITION_API_KEY\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`Nutrition API failed: ${response.status}`);\n        }\n        const data = await response.json(); // { items: [{ calories, carbs, fat, protein, ... }] }\n        if (data.items && data.items[0]) {\n          const item = data.items[0];\n          totalCals += item.calories || 0;\n          totalCarbs += item.carbohydrates_total_g || 0;\n          totalFat += item.fat_total_g || 0;\n          totalProtein += item.protein_g || 0;\n        }\n      } catch (err) {\n        console.error('Error fetching nutrition for', foodName, err);\n      }\n    }\n    setNutritionTotals({\n      calories: totalCals,\n      carbs: totalCarbs,\n      fat: totalFat,\n      protein: totalProtein\n    });\n    console.log('Total from foods:', {\n      calories: totalCals,\n      carbs: totalCarbs,\n      fat: totalFat,\n      protein: totalProtein\n    });\n  };\n\n  // ====================================================================\n  // 4) handleSave: POST new Tracker to your backend\n  // ====================================================================\n  const handleSave = async () => {\n    if (!userId || !goalId) {\n      console.error('User or goal ID not yet loaded. Wait or log in again.');\n      return;\n    }\n\n    // Combine the data from your states + the nutritionTotals\n    // Because your \"Tracker\" has \"nutrition\" with macros, we’ll put them there.\n    const requestBody = {\n      appUser: {\n        id: userId\n      },\n      goal: {\n        id: goalId\n      },\n      // exercise\n      exercise: {\n        caloriesBurned: parseFloat(caloriesBurned) || 0,\n        duration: parseFloat(time) || 0,\n        volume: totalVolume,\n        exerciseDate: dayId // you can store dayId as a string date\n      },\n      // nutrition\n      nutrition: {\n        weight: parseFloat(weight) || 0,\n        // user’s body weight\n        kal: parseFloat(nutritionTotals.calories.toFixed(2)),\n        // from the API sums\n        carb: parseFloat(nutritionTotals.carbs.toFixed(2)),\n        fat: parseFloat(nutritionTotals.fat.toFixed(2)),\n        protein: parseFloat(nutritionTotals.protein.toFixed(2)),\n        nutritionDate: dayId\n      },\n      // sleep\n      sleep: parseFloat(hoursSlept) || 0,\n      sleepDate: dayId,\n      // water\n      water: parseFloat(waterIntake) || 0,\n      waterDate: dayId\n    };\n    try {\n      const response = await fetch('http://localhost:8080/Tracker', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${userToken}`\n        },\n        body: JSON.stringify(requestBody)\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to create tracker. Status: ${response.status}`);\n      }\n      const created = await response.json();\n      console.log('Tracker created:', created);\n      navigate('/calendar');\n    } catch (err) {\n      console.error('Error saving tracker:', err);\n    }\n  };\n  const handleProgress = () => {\n    navigate(`/progress/${dayId}`);\n  };\n\n  // ====================================================================\n  // RENDER\n  // ====================================================================\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Input Progress for \", dayId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Exercise\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Calories Burned (kcal):\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: caloriesBurned,\n        onChange: e => setCaloriesBurned(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Total Volume: \", totalVolume, \" (weight \\xD7 reps \\xD7 sets)\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }, this), workouts.map((workout, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Weight:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: workout.weight,\n          onChange: e => {\n            const val = e.target.value;\n            setWorkouts(prev => {\n              const copy = [...prev];\n              copy[idx].weight = val;\n              return copy;\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Reps:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: workout.reps,\n          onChange: e => {\n            const val = e.target.value;\n            setWorkouts(prev => {\n              const copy = [...prev];\n              copy[idx].reps = val;\n              return copy;\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Sets:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: workout.sets,\n          onChange: e => {\n            const val = e.target.value;\n            setWorkouts(prev => {\n              const copy = [...prev];\n              copy[idx].sets = val;\n              return copy;\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 11\n      }, this)]\n    }, idx, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => setWorkouts([...workouts, {\n        weight: '',\n        reps: '',\n        sets: ''\n      }]),\n      children: \"Add Workout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Total Time (minutes):\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: time,\n        onChange: e => setTime(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Sleep\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Hours Slept:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: hoursSlept,\n        onChange: e => setHoursSlept(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Water Intake\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Water Intake (fl oz.):\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: waterIntake,\n        onChange: e => setWaterIntake(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Nutrition\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Weight (lbs):\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: weight,\n        onChange: e => setWeight(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: addFood,\n      children: \"Add Food\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleFetchNutrition,\n      style: {\n        marginLeft: '10px'\n      },\n      children: \"Fetch Nutrition from API\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }, this), foods.map((food, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '5px 0'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: food.name,\n        onChange: e => updateFood(index, e.target.value),\n        placeholder: \"e.g. mac and cheese\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Food totals (from API):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 49\n      }, this), \"Calories: \", nutritionTotals.calories, \" kcal\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 50\n      }, this), \"Carbs: \", nutritionTotals.carbs, \" g\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 41\n      }, this), \"Fat: \", nutritionTotals.fat, \" g\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 37\n      }, this), \"Protein: \", nutritionTotals.protein, \" g\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleSave,\n      style: {\n        marginRight: '10px'\n      },\n      children: \"Save Progress\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleProgress,\n      children: \"See Progress\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n}\n_s(InputPage, \"3o88laq5YlJfOlZmXcR0Q9inW3s=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = InputPage;\nexport default InputPage;\nvar _c;\n$RefreshReg$(_c, \"InputPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","jsxDEV","_jsxDEV","NUTRITION_API_KEY","InputPage","_s","dayId","navigate","userId","setUserId","goalId","setGoalId","caloriesBurned","setCaloriesBurned","workouts","setWorkouts","time","setTime","totalVolume","setTotalVolume","hoursSlept","setHoursSlept","waterIntake","setWaterIntake","weight","setWeight","foods","setFoods","userToken","setToken","userName","setName","nutritionTotals","setNutritionTotals","calories","carbs","fat","protein","token","localStorage","getItem","JSON","parse","console","error","fetchMe","meRes","fetch","headers","credentials","ok","Error","status","username","text","err","fetchUsername","fetchGoal","userRes","Authorization","userObj","json","id","goalRes","goalObj","log","total","forEach","w","weightNum","parseFloat","repsNum","reps","setsNum","sets","addFood","name","updateFood","index","value","updated","handleFetchNutrition","totalCals","totalCarbs","totalFat","totalProtein","i","length","foodName","trim","response","encodeURIComponent","data","items","item","carbohydrates_total_g","fat_total_g","protein_g","handleSave","requestBody","appUser","goal","exercise","duration","volume","exerciseDate","nutrition","kal","toFixed","carb","nutritionDate","sleep","sleepDate","water","waterDate","method","body","stringify","created","handleProgress","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","map","workout","idx","marginBottom","val","prev","copy","onClick","marginLeft","food","margin","placeholder","marginRight","_c","$RefreshReg$"],"sources":["C:/Users/htham/Documents/Revature/InfoSysTraining/project_2_trackr/revProj2/frontend/revproj2/src/Calendar/InputPage.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\n\r\nconst NUTRITION_API_KEY = 'gg1FPG2C5LRmeHth7W78aQ==AzZg9ImEsiX2oEbc';\r\n\r\nfunction InputPage() {\r\n  const { dayId } = useParams(); // e.g. \"2024-12-20\"\r\n  const navigate = useNavigate();\r\n\r\n  // We’ll fetch userId & goalId on mount:\r\n  const [userId, setUserId] = useState<number | null>(null);\r\n  const [goalId, setGoalId] = useState<number | null>(null);\r\n\r\n  // ---------- State for exercise ----------\r\n  const [caloriesBurned, setCaloriesBurned] = useState('');\r\n  const [workouts, setWorkouts] = useState<{ weight: string; reps: string; sets: string }[]>([]);\r\n  const [time, setTime] = useState('');\r\n  const [totalVolume, setTotalVolume] = useState(0);\r\n\r\n  // ---------- State for sleep ----------\r\n  const [hoursSlept, setHoursSlept] = useState('');\r\n\r\n  // ---------- State for water ----------\r\n  const [waterIntake, setWaterIntake] = useState('');\r\n\r\n  // ---------- State for nutrition ----------\r\n  // The user’s weight, plus macros from foods\r\n  const [weight, setWeight] = useState('');\r\n\r\n  // Foods typed by the user\r\n  const [foods, setFoods] = useState<{ name: string }[]>([]);\r\n\r\n  const [userToken, setToken] = useState('');\r\n  const [userName, setName] = useState('');\r\n\r\n\r\n  // Summed macros from the API calls\r\n  const [nutritionTotals, setNutritionTotals] = useState({\r\n    calories: 0,\r\n    carbs: 0,\r\n    fat: 0,\r\n    protein: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (token) {\r\n      setToken(JSON.parse(token));\r\n    }\r\n    else{\r\n      console.error('No token found. Please log in first.');\r\n      return;\r\n    }\r\n\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchMe = async () => {\r\n      try {\r\n        // 1) GET /me to get username\r\n        const meRes = await fetch(\"http://localhost:8080/me\", {\r\n          headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization' : `Bearer ${userToken}`,\r\n              'Access-Control-Allow-Origin': \"*\"\r\n              },\r\n              credentials : 'include'\r\n        });\r\n        if (!meRes.ok) {\r\n          throw new Error(`GET /me failed: ${meRes.status}`);\r\n        }\r\n        const username = await meRes.text(); // e.g. \"user1\"\r\n        setName(username);\r\n      } catch (err) {\r\n        console.error('Error fetching user/goal:', err);\r\n      }};\r\n      fetchMe();\r\n  }, [userToken]);\r\n\r\n\r\n  useEffect(() => {\r\n    if(userName)\r\n      fetchUsername();\r\n  }, [userName]);\r\n\r\n  useEffect(() => {\r\n    if(userId)\r\n      fetchGoal();\r\n  }, [userId]);\r\n\r\n\r\n  const fetchUsername = async () => {\r\n      // 2) GET /username/{username} to get user object (including id)\r\n      const userRes = await fetch(`http://localhost:8080/username/${userName}`, {\r\n        headers: { Authorization: `Bearer ${userToken}` },\r\n      });\r\n      if (!userRes.ok) {\r\n        throw new Error(`GET /username/${userName} failed: ${userRes.status}`);\r\n      }\r\n      const userObj = await userRes.json(); \r\n      setUserId(userObj.id);\r\n    };\r\n\r\n    const fetchGoal = async () => {\r\n      // 3) GET /goalUser/{userId} to get the user’s goal object (including goalId)\r\n      const goalRes = await fetch(`http://localhost:8080/goalUser/${userId}`, {\r\n        headers: { Authorization: `Bearer ${userToken}` },\r\n      });\r\n      if (!goalRes.ok) {\r\n        throw new Error(`GET /goalUser/${userId} failed: ${goalRes.status}`);\r\n      }\r\n      const goalObj = await goalRes.json(); \r\n      setGoalId(goalObj.id);\r\n      console.log(goalId);\r\n    };\r\n\r\n\r\n  // 2) Recalc totalVolume whenever workouts changes\r\n  useEffect(() => {\r\n    let total = 0;\r\n    workouts.forEach((w) => {\r\n      const weightNum = parseFloat(w.weight) || 0;\r\n      const repsNum = parseFloat(w.reps) || 0;\r\n      const setsNum = parseFloat(w.sets) || 0;\r\n      total += weightNum * repsNum * setsNum;\r\n    });\r\n    setTotalVolume(total);\r\n  }, [workouts]);\r\n\r\n  // 3) Handling foods + calling the Nutrition API\r\n  const addFood = () => {\r\n    setFoods([...foods, { name: '' }]);\r\n  };\r\n\r\n  const updateFood = (index: number, value: string) => {\r\n    const updated = [...foods];\r\n    updated[index].name = value;\r\n    setFoods(updated);\r\n  };\r\n\r\n  // On “Fetch Nutrition” we’ll sum up all the foods from the API\r\n  const handleFetchNutrition = async () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      console.error('No token found. Please log in first.');\r\n      return;\r\n    }\r\n\r\n    let totalCals = 0;\r\n    let totalCarbs = 0;\r\n    let totalFat = 0;\r\n    let totalProtein = 0;\r\n\r\n    for (let i = 0; i < foods.length; i++) {\r\n      const foodName = foods[i].name.trim();\r\n      if (!foodName) continue;\r\n\r\n      try {\r\n        const response = await fetch(\r\n          `https://api.calorieninjas.com/v1/nutrition?query=${encodeURIComponent(foodName)}`,\r\n          {\r\n            headers: {\r\n              'X-Api-Key': NUTRITION_API_KEY,\r\n            },\r\n          }\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(`Nutrition API failed: ${response.status}`);\r\n        }\r\n        const data = await response.json(); // { items: [{ calories, carbs, fat, protein, ... }] }\r\n        if (data.items && data.items[0]) {\r\n          const item = data.items[0];\r\n          totalCals += item.calories || 0;\r\n          totalCarbs += item.carbohydrates_total_g || 0;\r\n          totalFat += item.fat_total_g || 0;\r\n          totalProtein += item.protein_g || 0;\r\n        }\r\n      } catch (err) {\r\n        console.error('Error fetching nutrition for', foodName, err);\r\n      }\r\n    }\r\n\r\n    setNutritionTotals({\r\n      calories: totalCals,\r\n      carbs: totalCarbs,\r\n      fat: totalFat,\r\n      protein: totalProtein,\r\n    });\r\n\r\n    console.log('Total from foods:', {\r\n      calories: totalCals,\r\n      carbs: totalCarbs,\r\n      fat: totalFat,\r\n      protein: totalProtein,\r\n    });\r\n  };\r\n\r\n  // ====================================================================\r\n  // 4) handleSave: POST new Tracker to your backend\r\n  // ====================================================================\r\n  const handleSave = async () => {\r\n    if (!userId || !goalId) {\r\n      console.error('User or goal ID not yet loaded. Wait or log in again.');\r\n      return;\r\n    }\r\n\r\n    // Combine the data from your states + the nutritionTotals\r\n    // Because your \"Tracker\" has \"nutrition\" with macros, we’ll put them there.\r\n    const requestBody = {\r\n      appUser: { id: userId },\r\n      goal: { id: goalId },\r\n\r\n      // exercise\r\n      exercise: {\r\n        caloriesBurned: parseFloat(caloriesBurned) || 0,\r\n        duration: parseFloat(time) || 0,\r\n        volume: totalVolume,\r\n        exerciseDate: dayId, // you can store dayId as a string date\r\n      },\r\n\r\n      // nutrition\r\n      nutrition: {\r\n        weight: parseFloat(weight) || 0, // user’s body weight\r\n        kal: parseFloat(nutritionTotals.calories.toFixed(2)), // from the API sums\r\n        carb: parseFloat(nutritionTotals.carbs.toFixed(2)),\r\n        fat: parseFloat(nutritionTotals.fat.toFixed(2)),\r\n        protein: parseFloat(nutritionTotals.protein.toFixed(2)),\r\n        nutritionDate: dayId,\r\n      },\r\n\r\n      // sleep\r\n      sleep: parseFloat(hoursSlept) || 0,\r\n      sleepDate: dayId,\r\n\r\n      // water\r\n      water: parseFloat(waterIntake) || 0,\r\n      waterDate: dayId,\r\n    };\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:8080/Tracker', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${userToken}`,\r\n        },\r\n        body: JSON.stringify(requestBody),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to create tracker. Status: ${response.status}`);\r\n      }\r\n\r\n      const created = await response.json();\r\n      console.log('Tracker created:', created);\r\n      navigate('/calendar');\r\n    } catch (err) {\r\n      console.error('Error saving tracker:', err);\r\n    }\r\n  };\r\n\r\n  const handleProgress = () => {\r\n    navigate(`/progress/${dayId}`);\r\n  };\r\n\r\n  // ====================================================================\r\n  // RENDER\r\n  // ====================================================================\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <h2>Input Progress for {dayId}</h2>\r\n\r\n      <h3>Exercise</h3>\r\n      <label>\r\n        Calories Burned (kcal):\r\n        <input\r\n          type=\"number\"\r\n          value={caloriesBurned}\r\n          onChange={(e) => setCaloriesBurned(e.target.value)}\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>Total Volume: {totalVolume} (weight × reps × sets)</label>\r\n      <br /><br />\r\n\r\n      {workouts.map((workout, idx) => (\r\n        <div key={idx} style={{ marginBottom: '10px' }}>\r\n          <label>\r\n            Weight:\r\n            <input\r\n              type=\"number\"\r\n              value={workout.weight}\r\n              onChange={(e) => {\r\n                const val = e.target.value;\r\n                setWorkouts((prev) => {\r\n                  const copy = [...prev];\r\n                  copy[idx].weight = val;\r\n                  return copy;\r\n                });\r\n              }}\r\n            />\r\n          </label>\r\n          <label>\r\n            Reps:\r\n            <input\r\n              type=\"number\"\r\n              value={workout.reps}\r\n              onChange={(e) => {\r\n                const val = e.target.value;\r\n                setWorkouts((prev) => {\r\n                  const copy = [...prev];\r\n                  copy[idx].reps = val;\r\n                  return copy;\r\n                });\r\n              }}\r\n            />\r\n          </label>\r\n          <label>\r\n            Sets:\r\n            <input\r\n              type=\"number\"\r\n              value={workout.sets}\r\n              onChange={(e) => {\r\n                const val = e.target.value;\r\n                setWorkouts((prev) => {\r\n                  const copy = [...prev];\r\n                  copy[idx].sets = val;\r\n                  return copy;\r\n                });\r\n              }}\r\n            />\r\n          </label>\r\n        </div>\r\n      ))}\r\n      <button type=\"button\" onClick={() => setWorkouts([...workouts, { weight: '', reps: '', sets: '' }])}>\r\n        Add Workout\r\n      </button>\r\n      <br />\r\n      <label>\r\n        Total Time (minutes):\r\n        <input type=\"number\" value={time} onChange={(e) => setTime(e.target.value)} />\r\n      </label>\r\n      <br />\r\n\r\n      <h3>Sleep</h3>\r\n      <label>\r\n        Hours Slept:\r\n        <input\r\n          type=\"number\"\r\n          value={hoursSlept}\r\n          onChange={(e) => setHoursSlept(e.target.value)}\r\n        />\r\n      </label>\r\n      <br />\r\n\r\n      <h3>Water Intake</h3>\r\n      <label>\r\n        Water Intake (fl oz.):\r\n        <input\r\n          type=\"number\"\r\n          value={waterIntake}\r\n          onChange={(e) => setWaterIntake(e.target.value)}\r\n        />\r\n      </label>\r\n      <br />\r\n\r\n      <h3>Nutrition</h3>\r\n      <label>\r\n        Weight (lbs):\r\n        <input\r\n          type=\"number\"\r\n          value={weight}\r\n          onChange={(e) => setWeight(e.target.value)}\r\n        />\r\n      </label>\r\n      <br /><br />\r\n\r\n      {/* Foods + API */}\r\n      <button type=\"button\" onClick={addFood}>Add Food</button>\r\n      <button type=\"button\" onClick={handleFetchNutrition} style={{ marginLeft: '10px' }}>\r\n        Fetch Nutrition from API\r\n      </button>\r\n      {foods.map((food, index) => (\r\n        <div key={index} style={{ margin: '5px 0' }}>\r\n          <input\r\n            type=\"text\"\r\n            value={food.name}\r\n            onChange={(e) => updateFood(index, e.target.value)}\r\n            placeholder=\"e.g. mac and cheese\"\r\n          />\r\n        </div>\r\n      ))}\r\n      <br />\r\n\r\n      {/* Show the totals from the API calls */}\r\n      <p>\r\n        <strong>Food totals (from API):</strong><br />\r\n        Calories: {nutritionTotals.calories} kcal<br />\r\n        Carbs: {nutritionTotals.carbs} g<br />\r\n        Fat: {nutritionTotals.fat} g<br />\r\n        Protein: {nutritionTotals.protein} g\r\n      </p>\r\n\r\n      <button type=\"button\" onClick={handleSave} style={{ marginRight: '10px' }}>\r\n        Save Progress\r\n      </button>\r\n      <button type=\"button\" onClick={handleProgress}>\r\n        See Progress\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InputPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}